lib

lib/ccr.lua>3955>

-------------------------------
---     local functions     ---

local function saveldb(ldb)
	local f=fs.open("/cfg/ccr/ldb",'w')
	f.write("local database=")
	f.write(textutils.serialize(ldb))
	f.write("\n\nreturn database")
	f.close()
	return true
end

---     local functions     ---
-------------------------------
---     global functions    ---

function loaddb()
	local f=loadfile("/cfg/ccr/db")
	if f then 
		return f()
	end
	sync()
	local f=loadfile("/cfg/ccr/db")
	if f then 
		return f()
	else
		return {}
	end
end

function loadldb()
	local f=loadfile("/cfg/ccr/ldb")
	if f then 
		return f()
	else
		return {}
	end
end

function clearCache(verb)
	if verb and verb>0 then print("Clearing cache") end
	fs.delete("/tmp/ccr")
	return true
end

function sync(verb)
	if verb and verb>0 then print("Syncing with database") end
	local response=http.get("https://github.com/TheJuiceFR/CCRepo/raw/main/database")
	if not response then return false end
	local dbf=fs.open("/cfg/ccr/db",'w')
	repeat
		local rl=response.read(20)
		dbf.write(rl)
	until rl==nil
	dbf.close()
	return true
end

function resolve(pkg,verb)	--determines what packages need updating.
	if verb and verb>0 then print("Finding old packages") end
	local db=loaddb()
	local ldb=loadldb()
	local out={}
	
	for k,v in pairs(ldb) do
		if db[k] and v.version~=db[k].version then
			out[#out+1]=k
		end
	end
	
	return out
end

function install(pkg,verb,dep)	--installs or upgrades a package.
	local db=loaddb()			--	[verb] sets level of verbosity
	local ldb=loadldb()			--		0:slient 1:succinct 2:verbose
	if not db[pkg] then			--	[dep] declares the package as a dependency.
		return false, "'"..pkg.."' package does not exist."
	end
	if verb and verb>1 then print("Preparing to install '"..pkg.."'") end
	
	for k,v in pairs(db[pkg].depends) do
		if not ldb[v] then
			if not install(v,verb,true) then return false, "Dependency '"..v.."' could not be installed." end
		end
	end
	
	if verb and verb>1 then print("Downloading '"..pkg.."'") end
	local path="/tmp/ccr/"..pkg.."_"..db[pkg].version..".pack"
	local response=http.get(db[pkg].package)
	if not response then return false,"Error retrieving '"..pkg.."' package from \""..db[pkg].package..'"' end
	
	local f=fs.open(path,'w')
	repeat
		local rl=response.read(20)
		f.write(rl)
	until rl==nil
	f.close()
	
	remove(pkg,verb and verb-1,true)
	
	if verb and verb>0 then print("installing '"..pkg.."'") end
	pack.packdown(path,"/")
	
	ldb[pkg]=db[pkg]
	ldb[pkg].explicit=not dep
	saveldb(ldb)
	return true
end

function remove(pkg,verb,force)			--removes a package
	local ldb=loadldb()					--	[force] forces a dependency to be removed
	if not ldb[pkg] then
		return false, "'"..pkg.."' package is not installed."
	end
	if not force then
		for k,v in pairs(ldb) do
			for k2,v2 in pairs(v.depends) do
				if v2==pkg then return false, "'"..pkg.."' is required by '"..v.."'" end
			end
		end
	end
	if verb and verb>0 then print("Removing '"..pkg.."'") end
	for k,v in pairs(ldb[pkg].provides) do
		fs.delete("/etc/"..v)
		fs.delete("/lib/"..v)
		fs.delete("/lib/"..v..".lua")
		fs.delete("/gui/"..v)
		fs.delete("/gui/"..v..".lua")
		fs.delete("/startup/"..v)
		fs.delete("/startup/"..v..".lua")
		fs.delete(v)
		fs.delete(v..".lua")
	end
	
	ldb[pkg]=nil
	saveldb(ldb)
	return true
end

function purge(pkg,verb)
	if verb and verb>0 then print("purging '"..pkg.."'") end
	local db=loaddb()
	local ldb=loadldb()
	
	if ldb[pkg] then
		for k,v in pairs(ldb[pkg].provides) do
			fs.delete("/cfg/"..v)
			fs.delete("/home/.config/"..v)
			fs.delete("/home/"..v)
			fs.delete("/home/."..v)
		end
	end
	if db[pkg] then
		for k,v in pairs(db[pkg].provides) do
			fs.delete("/cfg/"..v)
			fs.delete("/home/.config/"..v)
			fs.delete("/home/"..v)
			fs.delete("/home/."..v)
		end
	end
	
	remove(pkg)
	return true
end

--[[function autoremove()		--removes all uneeded dependencies

end]]

---     global functions    ---
-------------------------------ccr.lua>3501>local tArgs={...}

local option=tArgs[1]

local function usageText()
print([[Usage: ccr <option> [arguments]
	ccr install <package1> [package2]...
		installs listed package(s)
	ccr remove <package1> [package2]...
		removes listed package(s)
	ccr purge <package1> [package2]..
		removes listed package(s) and it's config files
	ccr update
		updates all packages
	ccr info <package>
		gives info about package
	ccr list
		lists installed packages
	ccr listall
		lists all available packages
	ccr bootstrap [side/drive]
		bootstraps ccr onto disk in drive [side/drive]
]])
end


if option=="install" then
	if tArgs[2]==nil then
		print("No package name given")
		return
	end
	ccr.sync(1)
	
	tArgs[1]=nil
	for k,v in pairs(tArgs) do
		ccr.install(v,1)
	end
	ccr.clearCache(0)
elseif option=="remove" then
	if tArgs[2]==nil then
		print("No package name given")
		return
	end
	
	tArgs[1]=nil
	for k,v in pairs(tArgs) do
		ccr.remove(v,1)
	end
elseif option=="purge" then
	if tArgs[2]==nil then
		print("No package name given")
		return
	end
	
	tArgs[1]=nil
	for k,v in pairs(tArgs) do
		ccr.purge(v,1)
	end
elseif option=="update" then
	ccr.sync(0)
	
	local db=ccr.loaddb()
	local ldb=ccr.loadldb()
	
	for k,v in pairs(ldb) do
		if not db[k] then
			print("'"..k.."' is not in main database; skipping")
		elseif v.version~=db[k].version then
			print(k..": "..v.version.." > "..db[k].version)
			ccr.install(k)
		end
	end
elseif option=="info" then
	if tArgs[2]==nil then
		print("No package name given")
		return
	end
	ccr.sync(0)
	
	local db=ccr.loaddb()
	local ldb=ccr.loadldb()
	
	tArgs[1]=nil
	for k,v in pairs(tArgs) do
		if db[v] then
			print(v..":")
			print("version: "..db[v].version)
			print("description: "..db[v].description)
			if db[v].provides[1] then
				write("provides: ")
				for k2,v2 in pairs(db[v].provides) do
					write(v2..", ")
				end
			end
			if db[v].depends[1] then
				write("requires: ")
				for k2,v2 in pairs(db[v].depends) do
					write(v2..", ")
				end
			end
			if db[v].optDepends[1] then
				print("Optional packages: ")
				for k2,v2 in pairs(db[v].optDepends) do
					print(v2[1]..": "..v2[2])
				end
			end
		else
			print("'"..v"' is not in main database")
		end
		if ldb[v] and (db[v]==nil or ldb[v].version~=db[v].version) then
			print("local version: "..ldb[v].version)
		else
			print("'"..v.."' is not installed locally")
		end
	end
elseif option=="list" then
	local ldb=ccr.loadldb()
	
	for k,v in pairs(ldb) do
		print(k..":",v.version)
	end
	
elseif option=="listall" then
	ccr.sync(0)
	local db=ccr.loaddb()
	for k,v in pairs(db) do
		print(k..":",v.version)
	end
elseif option=="bootstrap" then
	local ldb=ccr.loadldb()
	local d
	if tArgs[2] then
		d=peripheral.wrap(tArgs[2])
		if d==nil then
			print("Drive not found")
			return
		end
	else
		d=peripheral.find("drive")
		if d==nil then
			print("No drive given, no drive found")
			return
		end
	end
	if d.getDiskID() then
		print("Floppy disk found. Bootstrap option is intended to be used on computers.")
		return
	end
	
	local m=d.getMountPath()
	if m==nil then
		print("Drive is empty")
		return
	end
	
	local items={"/ccr.lua","/lib/ccr.lua","/lib/pack.lua"}
	for k,v in ipairs(items) do
		fs.copy(v,m..v)
	end
	local newldb={}
	newldb.ccr=lbd.ccr
	newldb.pack=lbd.pack
	
	local f=fs.open(m.."/cfg/ccr/ldb",'w')
	f.write("local database=")
	f.write(textutils.serialize(newldb))
	f.write("\n\nreturn database")
	f.close()
	
	print("Bootstrapping complete")
else
	usageText()
end









